var randomcolor = require('just.randomcolor');
var crypto = require('crypto');
var fs = require('fs');
var path = require('path');

var salas = {
    principal: 0,
};

var images = [];

var socketHandler = function(sala,io,socket) {

	color = new randomcolor({
        r: [0, 120],
        g: [0, 120],
        b: [0, 150],
        a: [0.7, 1]
    });

	socket.color = '#' + color.toHex().value;
    socket.username = "Anonimo";
    socket.join(sala);

	var room = io.of(sala);

	//Room handler
    if (!salas[sala] && sala != "SRPAO") {
        salas[sala] = 1;
    } else {
        salas[sala] = salas[sala] + 1 || 1;
    }

    //Mensajes de conexion
    socket.emit('bienvenido', {
        msg: 'Bienvenido a la sala: <span style="font-weight: bold;">' + sala + '</span>, hay ' + salas[sala] + ' persona/s en la sala.',
        color: socket.color,
        img: room.img || null
    });

    socket.broadcast.to(sala).emit('server message', {
        msg: "Un usuario se conecto!, hay " + salas[sala] + " persona/s en la sala.",
        type: "cnx"
    });

    //Handle de funciones
	var funciones = {
		//Image Message
		image_message: function(data) {
			if(data.image.length > 14967820){
				socket.emit('alerta', {msg:"La imagen es muy pesada", type:"media"});
				return;
			}
			var token = crypto.randomBytes(32).toString('hex');
	        var base64Data = decodeBase64Image(data.image);
	        var acceptedFormats = ["image/jpeg","image/png","image/gif"];

	        if(acceptedFormats.indexOf(base64Data.type) > -1 && base64Data){
	            var imgLink = "public/uploads/" + token + ".jpg";
	            fs.writeFile(imgLink, base64Data.data, function (err) {
	                if (err) {
	                    socket.emit('alerta', {msg:"Hubo un error al subir la imagen", type:"media"});
	                    return;
	                }else{
	                	var prvt = data.to ? true : false;
	                    socket.emit('alerta', {msg:"", type:"media"});
	                    if(prvt){
	                    	socket.emit('image message', {img:"public/uploads/" + token + ".jpg",username:socket.username+" (Privado)"});
	                    	io.to(data.to).emit('image message', {img:"public/uploads/" + token + ".jpg",username:socket.username+" (Privado)"});
	                    } else {
							io.to(sala).emit('image message', {img:"public/uploads/" + token + ".jpg",username:socket.username});
	                    }
	                    images.push('public/uploads/'+token+'.jpg');
	                }
	            });
	        }else{
	            socket.emit('alerta', {msg:"El formato del archivo no es permitido o hubo un error al procesar la imagen", type:"media"});
	        }
		},

		//Chat Message
		chat_message: function(data) {
	        if (!data.msg || data.msg.length > 500) {
	            socket.emit('alerta', {msg:"Hubo un error inesperado, recarga la página, puede ser que el mensaje sea muy largo", type:"error"});
	            return;
	        }
	        //Emite el mensaje
	        data.msg = data.msg.replace(/(<([^>]+)>)/ig, "");
	        data.msg = replaceURLWithHTMLLinks(data.msg);
	        socket.broadcast.to(sala).emit('chat message', {
	            usr: socket.username,
	            msg: data.msg,
	            color: socket.color,
	            id: socket.id,
	            owner: room.owner == socket.id
	        });
		},

		//Prvt Message
		prvt_message: function(data) {
	        var receiver = io.sockets.connected[data.to];
	        var ownMsg = data.to == socket.id;
	        //Si no hay mensaje vuelve
	        if (!data.msg || data.msg.length > 500) {
	            socket.emit('alerta', {msg:"Hubo un error inesperado, recarga la página, puede ser que el mensaje sea muy largo", type:"error"});
	            return;
	        }
	        if (ownMsg) {
	            socket.emit('alerta', {msg:"No podes mandarte mensajes a vos mismo!", type:"error"});
	            return;
	        };
	        if (!receiver) {
	            socket.emit('alerta', {msg:"El usuario ya no se encuentra en la sala", type:"error"});
	            return;
	        }
	        //Emite el mensaje
	        socket.emit('prvt message', {
	            msg: data.msg,
	            usr_from: socket.username,
	            usr_to: receiver.username,
	            feedback: receiver.id
	        });
	        io.to(data.to).emit('prvt message', {
	            msg: data.msg,
	            usr_from: socket.username,
	            usr_to: receiver.username,
	            feedback: socket.id
	        });
	    },

	    //Change data
	    change_data: function(data) {
	        if (data.name.length > 15 || data.name.length < 2) {
	            socket.emit('alerta', {msg:"Nombre invalido", type:"error"});
	        } else {
	            socket.username = data.name.replace(/[^0-9a-zA-Z ]+/g, "") || socket.username;
	            socket.emit('alerta', {msg:"Tu nombre es " + socket.username, type:"notif"});
	        }
	    },

	    //Disconnection
	    disconnect: function() {
	        salas[sala] = salas[sala] - 1 || 0;
	        socket.broadcast.to(sala).emit('server message', {
	            usr: socket.username,
	            color: socket.color,
	            type: "dcnx"
	        });
	    }

	    //Conseguir imagenes
	    get_images: function() {
	    	socket.emit('get images', images);
	    }
	}
	return funciones;
};

// Funciones necesarias para procesos
function replaceURLWithHTMLLinks(text) {
    var exp = /(\b(((https?|ftp|file|):\/\/)|www[.])[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])/ig;
    text = text.replace(/.*?:\/\//g, "");
    text = text.replace(exp, "<a target='_blank' href='http://$1'>$1</a>");
    return text;
}

function decodeBase64Image(dataString) {
    var matches = dataString.match(/^data:([A-Za-z-+\/]+);base64,(.+)$/),
        response = {};
    if (!matches || matches.length !== 3) {
        return response;
    }else{
        response.type = matches[1];
        response.data = new Buffer(matches[2], 'base64');
    }
    return response;
}

//Exportacion
module.exports = socketHandler;